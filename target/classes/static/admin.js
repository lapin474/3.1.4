// –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–æ–ª—å: ROLE_ADMIN ‚Üí Admin
function beautifyRole(role) {
    return role.replace("ROLE_", "").toLowerCase().replace(/^./, c => c.toUpperCase());
}

document.addEventListener("DOMContentLoaded", () => {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    loadUsers();

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏)
    loadCurrentUser();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.getElementById("addUserForm").addEventListener("submit", (e) => {
        e.preventDefault();
        createUser();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.getElementById("editUserForm").addEventListener("submit", (e) => {
        e.preventDefault();
        updateUser();
    });
});

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ
function loadUsers() {
    fetch("/api/users")
        .then(res => res.json())
        .then(users => {
            const tbody = document.getElementById("userTableBody");
            tbody.innerHTML = "";
            users.forEach(user => {
                tbody.insertAdjacentHTML("beforeend", renderUserRow(user));
            });
        })
        .catch(err => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err));
}

// –í–µ—Ä–Ω—É—Ç—å HTML —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function renderUserRow(user) {
    const roles = user.roleNames.map(beautifyRole).join(", ");
    return `
    <tr>
      <td>${user.id}</td>
      <td>${user.email}</td>
      <td>${user.firstName}</td>
      <td>${user.lastName}</td>
      <td>${roles}</td>
      <td>
        <button class="btn btn-sm btn-info me-1" onclick="openEditModal(${user.id})">Edit</button>
        <button class="btn btn-sm btn-danger" onclick="openDeleteModal(${user.id})">Delete</button>
      </td>
    </tr>
  `;
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤ –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å
function loadCurrentUser() {
    fetch("/api/users/me")
        .then(res => res.json())
        .then(user => {
            window.currentUser = user;  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
            loadSidebarMenu(user);
            const roles = user.roleNames.map(beautifyRole).join(", ");
            document.getElementById("auth-info").textContent = `${user.email} —Å —Ä–æ–ª—è–º–∏: ${roles}`;

            if (user.roleNames.includes("ROLE_ADMIN")) {
                showPanel("admin-panel");
            } else {
                showPanel("user-panel");
                renderUserInfo(user);
            }

        })
        .catch(err => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err));
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
function renderUserInfo(user) {
    const tbody = document.getElementById("user-info-body");
    tbody.innerHTML = `
        <tr>
            <td>${user.id}</td>
            <td>${user.firstName}</td>
            <td>${user.lastName}</td>
            <td>${user.email}</td>
            <td>${user.roleNames.map(beautifyRole).join(", ")}</td>
        </tr>
    `;
}
function loadSidebarMenu(user) {
    const sidebar = document.getElementById("sidebar-menu");
    sidebar.innerHTML = ""; // –æ—á–∏—Å—Ç–∏—Ç—å –º–µ–Ω—é

    if (user.roleNames.includes("ROLE_ADMIN")) {
        sidebar.insertAdjacentHTML("beforeend", `
        <li class="nav-item">
            <a class="nav-link" href="#admin-panel" onclick="showPanel('admin-panel')">Admin</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#user-panel" onclick="showPanel('user-panel')">User</a>
        </li>
    `);
    } else {
        sidebar.insertAdjacentHTML("beforeend", `
        <li class="nav-item">
            <a class="nav-link" href="#user-panel" onclick="showPanel('user-panel')">User</a>
        </li>
    `);
    }

    // üëá –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–∫–ª–∞–¥–∫—É –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É
    if (user.roleNames.includes("ROLE_ADMIN")) {
        showPanel("admin-panel");
    } else {
        showPanel("user-panel");
    }
}




// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function createUser() {
    const user = {
        firstName: document.getElementById("addFirstName").value.trim(),
        lastName: document.getElementById("addLastName").value.trim(),
        email: document.getElementById("addEmail").value.trim(),
        password: document.getElementById("addPassword").value,
        roleNames: Array.from(document.getElementById("addRoles").selectedOptions).map(opt => opt.value)
    };

    fetch("/api/users", {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify(user)
    })
        .then(res => {
            if (res.ok) {
                document.getElementById("addUserForm").reset();
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É, –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –º–æ–¥–∞–ª–∫–∞ (–∏–Ω–∞—á–µ —É–±–∏—Ä–∞–π —ç—Ç—É —Å—Ç—Ä–æ–∫—É)
                const addModal = document.getElementById("addUserModal");
                if (addModal) bootstrap.Modal.getInstance(addModal)?.hide();

                loadUsers();
            } else {
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }
        })
        .catch(err => {
            alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            console.error(err);
        });
}

let currentEditUserId = null;

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
function openEditModal(id) {
    fetch(`/api/users/${id}`)
        .then(res => res.json())
        .then(user => {
            currentEditUserId = id;
            document.getElementById("editUserId").value = user.id;
            document.getElementById("editFirstName").value = user.firstName;
            document.getElementById("editLastName").value = user.lastName;
            document.getElementById("editEmail").value = user.email;
            document.getElementById("editPassword").value = "";

            const rolesSelect = document.getElementById("editRoles");
            Array.from(rolesSelect.options).forEach(opt => {
                opt.selected = user.roleNames.includes(opt.value);
            });

            bootstrap.Modal.getOrCreateInstance(document.getElementById("editUserModal")).show();
        })
        .catch(err => alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"));
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
function updateUser() {
    const updatedUser = {
        firstName: document.getElementById("editFirstName").value.trim(),
        lastName: document.getElementById("editLastName").value.trim(),
        email: document.getElementById("editEmail").value.trim(),
        password: document.getElementById("editPassword").value,
        roleNames: Array.from(document.getElementById("editRoles").selectedOptions).map(opt => opt.value)
    };

    fetch(`/api/users/${currentEditUserId}`, {
        method: "PUT",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify(updatedUser)
    })
        .then(res => {
            if (res.ok) {
                bootstrap.Modal.getInstance(document.getElementById("editUserModal")).hide();
                loadUsers();
            } else {
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }
        })
        .catch(err => alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"));
}

let currentDeleteUserId = null;

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
function openDeleteModal(id) {
    currentDeleteUserId = id;

    fetch(`/api/users/${id}`)
        .then(res => res.json())
        .then(user => {
            document.getElementById("deleteId").value = user.id;
            document.getElementById("deleteFirstName").value = user.firstName;
            document.getElementById("deleteLastName").value = user.lastName;
            document.getElementById("deleteEmail").value = user.email;

            const rolesSelect = document.getElementById("deleteRoles");
            Array.from(rolesSelect.options).forEach(opt => {
                opt.selected = user.roleNames.includes(opt.value);
            });

            bootstrap.Modal.getOrCreateInstance(document.getElementById("deleteUserModal")).show();
        })
        .catch(err => alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"));
}

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function confirmDeleteUser() {
    fetch(`/api/users/${currentDeleteUserId}`, {
        method: "DELETE"
    })
        .then(res => {
            if (res.ok) {
                bootstrap.Modal.getInstance(document.getElementById("deleteUserModal")).hide();
                loadUsers();
            } else {
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }
        })
        .catch(err => alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"));
}
function showPanel(panelId) {
    const panels = ["admin-panel", "user-panel"];
    panels.forEach(id => {
        const el = document.getElementById(id);
        if (el) el.style.display = (id === panelId) ? "block" : "none";
    });

    document.querySelectorAll("#sidebar-menu .nav-link").forEach(link => {
        const href = link.getAttribute("href");
        if (href === `#${panelId}`) {
            link.classList.add("active");
        } else {
            link.classList.remove("active");
        }
    });

    // –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏ user-panel, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (panelId === "user-panel" && window.currentUser) {
        renderUserInfo(window.currentUser);
    }
}


window.showPanel = showPanel; // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ

